
AVRASM ver. 2.1.30  C:\Users\Jamshid\Desktop\H-W-2\List\HW2-LCD.asm Sun Dec 27 10:46:02 2020

C:\Users\Jamshid\Desktop\H-W-2\List\HW2-LCD.asm(1059): warning: Register r4 already defined by the .DEF directive
C:\Users\Jamshid\Desktop\H-W-2\List\HW2-LCD.asm(1060): warning: Register r6 already defined by the .DEF directive
C:\Users\Jamshid\Desktop\H-W-2\List\HW2-LCD.asm(1061): warning: Register r8 already defined by the .DEF directive
C:\Users\Jamshid\Desktop\H-W-2\List\HW2-LCD.asm(1062): warning: Register r10 already defined by the .DEF directive
C:\Users\Jamshid\Desktop\H-W-2\List\HW2-LCD.asm(1063): warning: Register r13 already defined by the .DEF directive
C:\Users\Jamshid\Desktop\H-W-2\List\HW2-LCD.asm(1064): warning: Register r12 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V2.05.0 Professional
                 ;(C) Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Chip type                : ATmega16
                 ;Program type             : Application
                 ;Clock frequency          : 8.000000 MHz
                 ;Memory model             : Small
                 ;Optimize for             : Size
                 ;(s)printf features       : int, width
                 ;(s)scanf features        : int, width
                 ;External RAM size        : 0
                 ;Data Stack size          : 256 byte(s)
                 ;Heap size                : 0 byte(s)
                 ;Promote 'char' to 'int'  : Yes
                 ;'char' is unsigned       : Yes
                 ;8 bit enums              : Yes
                 ;global 'const' stored in FLASH: No
                 ;Enhanced core instructions    : On
                 ;Smart register allocation     : On
                 ;Automatic register allocation : On
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1119
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _TimerOverFlowCounter=R4
                 	.DEF _x=R6
                 	.DEF _y=R8
                 	.DEF _character=R10
                 	.DEF __lcd_x=R13
                 	.DEF __lcd_y=R12
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 002f 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 005f 	JMP  _timer0_ovf_isr
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _0x2000003:
00002a c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
00002b 0002      	.DW  0x02
00002c 0160      	.DW  __base_y_G100
00002d 0054      	.DW  _0x2000003*2
                 
                 _0xFFFFFFFF:
00002e 0000      	.DW  0
                 
                 __RESET:
00002f 94f8      	CLI
000030 27ee      	CLR  R30
000031 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000032 e0f1      	LDI  R31,1
000033 bffb      	OUT  GICR,R31
000034 bfeb      	OUT  GICR,R30
000035 bfe5      	OUT  MCUCR,R30
                 
                 ;DISABLE WATCHDOG
000036 e1f8      	LDI  R31,0x18
000037 bdf1      	OUT  WDTCR,R31
000038 bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
000039 e08d      	LDI  R24,(14-2)+1
00003a e0a2      	LDI  R26,2
00003b 27bb      	CLR  R27
                 __CLEAR_REG:
00003c 93ed      	ST   X+,R30
00003d 958a      	DEC  R24
00003e f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00003f e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000040 e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000041 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000042 93ed      	ST   X+,R30
000043 9701      	SBIW R24,1
000044 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000045 e5e6      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000046 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000047 9185      	LPM  R24,Z+
000048 9195      	LPM  R25,Z+
000049 9700      	SBIW R24,0
00004a f061      	BREQ __GLOBAL_INI_END
00004b 91a5      	LPM  R26,Z+
00004c 91b5      	LPM  R27,Z+
00004d 9005      	LPM  R0,Z+
00004e 9015      	LPM  R1,Z+
00004f 01bf      	MOVW R22,R30
000050 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000051 9005      	LPM  R0,Z+
000052 920d      	ST   X+,R0
000053 9701      	SBIW R24,1
000054 f7e1      	BRNE __GLOBAL_INI_LOOP
000055 01fb      	MOVW R30,R22
000056 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000057 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000058 bfed      	OUT  SPL,R30
000059 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00005a bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00005b e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00005c e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00005d 940c 00a3 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;
                 ;
                 ;#include <mega16.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <alcd.h>
                 ;
                 ;
                 ;int TimerOverFlowCounter;
                 ;int x;
                 ;int y;
                 ;int character;
                 ;
                 ;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
                 ; 0000 000D {
                 
                 	.CSEG
                 _timer0_ovf_isr:
00005f 920a      	ST   -Y,R0
000060 921a      	ST   -Y,R1
000061 92fa      	ST   -Y,R15
000062 936a      	ST   -Y,R22
000063 937a      	ST   -Y,R23
000064 938a      	ST   -Y,R24
000065 939a      	ST   -Y,R25
000066 93aa      	ST   -Y,R26
000067 93ba      	ST   -Y,R27
000068 93ea      	ST   -Y,R30
000069 93fa      	ST   -Y,R31
00006a b7ef      	IN   R30,SREG
00006b 93ea      	ST   -Y,R30
                 ; 0000 000E       ++ TimerOverFlowCounter;
00006c 01f2      	MOVW R30,R4
00006d 9631      	ADIW R30,1
00006e 012f      	MOVW R4,R30
                 ; 0000 000F 
                 ; 0000 0010       if(TimerOverFlowCounter ==1000){
00006f eee8      	LDI  R30,LOW(1000)
000070 e0f3      	LDI  R31,HIGH(1000)
000071 15e4      	CP   R30,R4
000072 05f5      	CPC  R31,R5
000073 f4f9      	BRNE _0x3
                 ; 0000 0011 
                 ; 0000 0012           lcd_putchar(character);
000074 92aa      	ST   -Y,R10
000075 d08f      	RCALL _lcd_putchar
                 ; 0000 0013           character +=1;
000076 01f5      	MOVW R30,R10
000077 9631      	ADIW R30,1
000078 015f      	MOVW R10,R30
                 ; 0000 0014           x=x+1;
000079 01f3      	MOVW R30,R6
00007a 9631      	ADIW R30,1
00007b 013f      	MOVW R6,R30
                 ; 0000 0015 
                 ; 0000 0016             if(x==20){
00007c e1e4      	LDI  R30,LOW(20)
00007d e0f0      	LDI  R31,HIGH(20)
00007e 15e6      	CP   R30,R6
00007f 05f7      	CPC  R31,R7
000080 f429      	BRNE _0x4
                 ; 0000 0017             x=0;
000081 2466      	CLR  R6
000082 2477      	CLR  R7
                 ; 0000 0018             y=1;
000083 e0e1      	LDI  R30,LOW(1)
000084 e0f0      	LDI  R31,HIGH(1)
000085 014f      	MOVW R8,R30
                 ; 0000 0019              }
                 ; 0000 001A 
                 ; 0000 001B             lcd_gotoxy(x,y);
                 _0x4:
000086 926a      	ST   -Y,R6
000087 928a      	ST   -Y,R8
000088 d064      	RCALL _lcd_gotoxy
                 ; 0000 001C             TimerOverFlowCounter=0;
000089 2444      	CLR  R4
00008a 2455      	CLR  R5
                 ; 0000 001D 
                 ; 0000 001E             if(character == 0x5b){
00008b e5eb      	LDI  R30,LOW(91)
00008c e0f0      	LDI  R31,HIGH(91)
00008d 15ea      	CP   R30,R10
00008e 05fb      	CPC  R31,R11
00008f f419      	BRNE _0x5
                 ; 0000 001F               TCCR0=0x00;
000090 e0e0      	LDI  R30,LOW(0)
000091 bfe3      	OUT  0x33,R30
                 ; 0000 0020               TIMSK=0x00;
000092 bfe9      	OUT  0x39,R30
                 ; 0000 0021             }
                 ; 0000 0022 
                 ; 0000 0023        }
                 _0x5:
                 ; 0000 0024 
                 ; 0000 0025       TCNT0=0x00;
                 _0x3:
000093 e0e0      	LDI  R30,LOW(0)
000094 bfe2      	OUT  0x32,R30
                 ; 0000 0026 
                 ; 0000 0027 }
000095 91e9      	LD   R30,Y+
000096 bfef      	OUT  SREG,R30
000097 91f9      	LD   R31,Y+
000098 91e9      	LD   R30,Y+
000099 91b9      	LD   R27,Y+
00009a 91a9      	LD   R26,Y+
00009b 9199      	LD   R25,Y+
00009c 9189      	LD   R24,Y+
00009d 9179      	LD   R23,Y+
00009e 9169      	LD   R22,Y+
00009f 90f9      	LD   R15,Y+
0000a0 9019      	LD   R1,Y+
0000a1 9009      	LD   R0,Y+
0000a2 9518      	RETI
                 ;
                 ;
                 ;void main(void)
                 ; 0000 002B {
                 _main:
                 ; 0000 002C 
                 ; 0000 002D     DDRA=0x00;
0000a3 e0e0      	LDI  R30,LOW(0)
0000a4 bbea      	OUT  0x1A,R30
                 ; 0000 002E     PORTA=0x00;
0000a5 bbeb      	OUT  0x1B,R30
                 ; 0000 002F     x=0;
0000a6 2466      	CLR  R6
0000a7 2477      	CLR  R7
                 ; 0000 0030     y=0;
0000a8 2488      	CLR  R8
0000a9 2499      	CLR  R9
                 ; 0000 0031     TimerOverFlowCounter=0;
0000aa 2444      	CLR  R4
0000ab 2455      	CLR  R5
                 ; 0000 0032     character=0x41;
0000ac e4e1      	LDI  R30,LOW(65)
0000ad e0f0      	LDI  R31,HIGH(65)
0000ae 015f      	MOVW R10,R30
                 ; 0000 0033     TCCR0=0x01;
0000af e0e1      	LDI  R30,LOW(1)
0000b0 bfe3      	OUT  0x33,R30
                 ; 0000 0034     TCNT0=0x00;
0000b1 e0e0      	LDI  R30,LOW(0)
0000b2 bfe2      	OUT  0x32,R30
                 ; 0000 0035     OCR0=0x00;
0000b3 bfec      	OUT  0x3C,R30
                 ; 0000 0036     TIMSK=0x01;
0000b4 e0e1      	LDI  R30,LOW(1)
0000b5 bfe9      	OUT  0x39,R30
                 ; 0000 0037     lcd_init(20);
0000b6 e1e4      	LDI  R30,LOW(20)
0000b7 93ea      	ST   -Y,R30
0000b8 d062      	RCALL _lcd_init
                 ; 0000 0038     #asm("sei")
0000b9 9478      	sei
                 ; 0000 0039 
                 ; 0000 003A while (1)
                 _0x6:
                 ; 0000 003B       {
                 ; 0000 003C 
                 ; 0000 003D 
                 ; 0000 003E       }
0000ba cfff      	RJMP _0x6
                 ; 0000 003F 
                 ; 0000 0040 
                 ; 0000 0041 }
                 _0x9:
0000bb cfff      	RJMP _0x9
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
0000bc 81e8      	LD   R30,Y
0000bd 71e0      	ANDI R30,LOW(0x10)
0000be f011      	BREQ _0x2000004
0000bf 9adc      	SBI  0x1B,4
0000c0 c001      	RJMP _0x2000005
                 _0x2000004:
0000c1 98dc      	CBI  0x1B,4
                 _0x2000005:
0000c2 81e8      	LD   R30,Y
0000c3 72e0      	ANDI R30,LOW(0x20)
0000c4 f011      	BREQ _0x2000006
0000c5 9add      	SBI  0x1B,5
0000c6 c001      	RJMP _0x2000007
                 _0x2000006:
0000c7 98dd      	CBI  0x1B,5
                 _0x2000007:
0000c8 81e8      	LD   R30,Y
0000c9 74e0      	ANDI R30,LOW(0x40)
0000ca f011      	BREQ _0x2000008
0000cb 9ade      	SBI  0x1B,6
0000cc c001      	RJMP _0x2000009
                 _0x2000008:
0000cd 98de      	CBI  0x1B,6
                 _0x2000009:
0000ce 81e8      	LD   R30,Y
0000cf 78e0      	ANDI R30,LOW(0x80)
0000d0 f011      	BREQ _0x200000A
0000d1 9adf      	SBI  0x1B,7
0000d2 c001      	RJMP _0x200000B
                 _0x200000A:
0000d3 98df      	CBI  0x1B,7
                 _0x200000B:
                +
0000d4 e085     +LDI R24 , LOW ( 5 )
                +__DELAY_USB_LOOP :
0000d5 958a     +DEC R24
0000d6 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 5
0000d7 9ada      	SBI  0x1B,2
                +
0000d8 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0000d9 958a     +DEC R24
0000da f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0000db 98da      	CBI  0x1B,2
                +
0000dc e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0000dd 958a     +DEC R24
0000de f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0000df c06c      	RJMP _0x2020001
                 __lcd_write_data:
0000e0 81e8      	LD   R30,Y
0000e1 93ea      	ST   -Y,R30
0000e2 dfd9      	RCALL __lcd_write_nibble_G100
0000e3 81e8          ld    r30,y
0000e4 95e2          swap  r30
0000e5 83e8          st    y,r30
0000e6 81e8      	LD   R30,Y
0000e7 93ea      	ST   -Y,R30
0000e8 dfd3      	RCALL __lcd_write_nibble_G100
                +
0000e9 e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
0000ea 958a     +DEC R24
0000eb f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
0000ec c05f      	RJMP _0x2020001
                 _lcd_gotoxy:
0000ed 81e8      	LD   R30,Y
0000ee e0f0      	LDI  R31,0
0000ef 5ae0      	SUBI R30,LOW(-__base_y_G100)
0000f0 4ffe      	SBCI R31,HIGH(-__base_y_G100)
0000f1 81e0      	LD   R30,Z
0000f2 81a9      	LDD  R26,Y+1
0000f3 0fea      	ADD  R30,R26
0000f4 93ea      	ST   -Y,R30
0000f5 dfea      	RCALL __lcd_write_data
0000f6 80d9      	LDD  R13,Y+1
0000f7 80c8      	LDD  R12,Y+0
0000f8 9622      	ADIW R28,2
0000f9 9508      	RET
                 _lcd_clear:
0000fa e0e2      	LDI  R30,LOW(2)
0000fb d052      	RCALL SUBOPT_0x0
0000fc e0ec      	LDI  R30,LOW(12)
0000fd 93ea      	ST   -Y,R30
0000fe dfe1      	RCALL __lcd_write_data
0000ff e0e1      	LDI  R30,LOW(1)
000100 d04d      	RCALL SUBOPT_0x0
000101 e0e0      	LDI  R30,LOW(0)
000102 2ece      	MOV  R12,R30
000103 2ede      	MOV  R13,R30
000104 9508      	RET
                 _lcd_putchar:
000105 81a8      	LD   R26,Y
000106 30aa      	CPI  R26,LOW(0xA)
000107 f021      	BREQ _0x2000011
000108 91e0 0164 	LDS  R30,__lcd_maxx
00010a 16de      	CP   R13,R30
00010b f040      	BRLO _0x2000010
                 _0x2000011:
00010c e0e0      	LDI  R30,LOW(0)
00010d 93ea      	ST   -Y,R30
00010e 94c3      	INC  R12
00010f 92ca      	ST   -Y,R12
000110 dfdc      	RCALL _lcd_gotoxy
000111 81a8      	LD   R26,Y
000112 30aa      	CPI  R26,LOW(0xA)
000113 f1c1      	BREQ _0x2020001
                 _0x2000010:
000114 94d3      	INC  R13
000115 9ad8      	SBI  0x1B,0
000116 81e8      	LD   R30,Y
000117 93ea      	ST   -Y,R30
000118 dfc7      	RCALL __lcd_write_data
000119 98d8      	CBI  0x1B,0
00011a c031      	RJMP _0x2020001
                 _lcd_init:
00011b 9ad4      	SBI  0x1A,4
00011c 9ad5      	SBI  0x1A,5
00011d 9ad6      	SBI  0x1A,6
00011e 9ad7      	SBI  0x1A,7
00011f 9ad2      	SBI  0x1A,2
000120 9ad0      	SBI  0x1A,0
000121 9ad1      	SBI  0x1A,1
000122 98da      	CBI  0x1B,2
000123 98d8      	CBI  0x1B,0
000124 98d9      	CBI  0x1B,1
000125 81e8      	LD   R30,Y
000126 93e0 0164 	STS  __lcd_maxx,R30
000128 58e0      	SUBI R30,-LOW(128)
                +
000129 93e0 0162+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
00012b 81e8      	LD   R30,Y
00012c 54e0      	SUBI R30,-LOW(192)
                +
00012d 93e0 0163+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
00012f e1e4      	LDI  R30,LOW(20)
000130 e0f0      	LDI  R31,HIGH(20)
000131 93fa      	ST   -Y,R31
000132 93ea      	ST   -Y,R30
000133 940e 015e 	CALL _delay_ms
000135 d020      	RCALL SUBOPT_0x1
000136 d01f      	RCALL SUBOPT_0x1
000137 d01e      	RCALL SUBOPT_0x1
000138 e2e0      	LDI  R30,LOW(32)
000139 93ea      	ST   -Y,R30
00013a df81      	RCALL __lcd_write_nibble_G100
                +
00013b ec88     +LDI R24 , LOW ( 200 )
00013c e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
00013d 9701     +SBIW R24 , 1
00013e f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
00013f e2e8      	LDI  R30,LOW(40)
000140 93ea      	ST   -Y,R30
000141 df9e      	RCALL __lcd_write_data
000142 e0e4      	LDI  R30,LOW(4)
000143 93ea      	ST   -Y,R30
000144 df9b      	RCALL __lcd_write_data
000145 e8e5      	LDI  R30,LOW(133)
000146 93ea      	ST   -Y,R30
000147 df98      	RCALL __lcd_write_data
000148 e0e6      	LDI  R30,LOW(6)
000149 93ea      	ST   -Y,R30
00014a df95      	RCALL __lcd_write_data
00014b dfae      	RCALL _lcd_clear
                 _0x2020001:
00014c 9621      	ADIW R28,1
00014d 9508      	RET
                 
                 	.DSEG
                 __base_y_G100:
000160           	.BYTE 0x4
                 __lcd_maxx:
000164           	.BYTE 0x1
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x0:
00014e 93ea      	ST   -Y,R30
00014f df90      	RCALL __lcd_write_data
000150 e0e3      	LDI  R30,LOW(3)
000151 e0f0      	LDI  R31,HIGH(3)
000152 93fa      	ST   -Y,R31
000153 93ea      	ST   -Y,R30
000154 940c 015e 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x1:
000156 e3e0      	LDI  R30,LOW(48)
000157 93ea      	ST   -Y,R30
000158 df63      	RCALL __lcd_write_nibble_G100
                +
000159 ec88     +LDI R24 , LOW ( 200 )
00015a e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
00015b 9701     +SBIW R24 , 1
00015c f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
00015d 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
00015e 91e9      	ld   r30,y+
00015f 91f9      	ld   r31,y+
000160 9630      	adiw r30,0
000161 f039      	breq __delay_ms1
                 __delay_ms0:
                +
000162 ed80     +LDI R24 , LOW ( 0x7D0 )
000163 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
000164 9701     +SBIW R24 , 1
000165 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
000166 95a8      	wdr
000167 9731      	sbiw r30,1
000168 f7c9      	brne __delay_ms0
                 __delay_ms1:
000169 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :   6 r1 :   3 r2 :   0 r3 :   0 r4 :   5 r5 :   3 r6 :   6 r7 :   3 
r8 :   3 r9 :   1 r10:   5 r11:   1 r12:   4 r13:   4 r14:   0 r15:   2 
r16:   0 r17:   0 r18:   0 r19:   0 r20:   0 r21:   0 r22:   4 r23:   2 
r24:  23 r25:   7 r26:  11 r27:   4 r28:   3 r29:   1 r30: 117 r31:  22 
x  :   3 y  :  65 z  :   8 
Registers used: 26 out of 35 (74.3%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   0 add   :   1 
adiw  :   6 and   :   0 andi  :   4 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :   8 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   1 
brlt  :   0 brmi  :   0 brne  :  14 brpl  :   0 brsh  :   0 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :   1 
cbi   :   9 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  12 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :   4 cpc   :   3 cpi   :   2 cpse  :   0 dec   :   5 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   1 inc   :   2 jmp   :  23 ld    :  28 ldd   :   3 ldi   :  56 
lds   :   1 lpm   :   7 lsl   :   0 lsr   :   0 mov   :   2 movw  :  11 
mul   :   0 muls  :   0 mulsu :   0 neg   :   0 nop   :   0 or    :   0 
ori   :   0 out   :  18 pop   :   0 push  :   0 rcall :  22 ret   :   5 
reti  :   1 rjmp  :  10 rol   :   0 ror   :   0 sbc   :   0 sbci  :   1 
sbi   :  13 sbic  :   0 sbis  :   0 sbiw  :   7 sbr   :   0 sbrc  :   0 
sbrs  :   0 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  38 std   :   0 sts   :   3 sub   :   0 subi  :   3 swap  :   1 
tst   :   0 wdr   :   1 
Instructions used: 38 out of 116 (32.8%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0002d4    714     10    724   16384   4.4%
[.dseg] 0x000060 0x000165      0      5      5    1119   0.4%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 6 warnings
