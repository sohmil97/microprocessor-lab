;#include <mega16.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;
;bit flag=0;
;int states[4] = {0b00001001 , 0b000001010 , 0b00000110 , 0b00000101};

	.DSEG
;int currentPosition=0;
;int TimerOverFlowCounter =0;
; int direction;
;
;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
; 0000 000B {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 000C 
; 0000 000D             TCNT0=6;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 000E 
; 0000 000F     PORTA = states[currentPosition];
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 0010 
; 0000 0011     if(direction>0) {
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 0012         if(currentPosition<3) {
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 0013             ++currentPosition;
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 0014         } else {
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 0015             currentPosition=0;
;PCODE: $00000021 VOL: 0
; 0000 0016         }
;PCODE: $00000022 VOL: 0
; 0000 0017     } else {
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 0018         if(currentPosition>0) {
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 0019             --currentPosition;
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 001A         } else {
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 001B             currentPosition=3;
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 001C         }
;PCODE: $0000002E VOL: 0
; 0000 001D     }
;PCODE: $0000002F VOL: 0
; 0000 001E 
; 0000 001F 
; 0000 0020 }
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;
;void main(void)
; 0000 0023 {
;PCODE: $00000033 VOL: 0
; 0000 0024 
; 0000 0025     currentPosition = 0;
;PCODE: $00000034 VOL: 0
; 0000 0026     direction = 1;
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 0027 
; 0000 0028 DDRA=0xff;
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 0029 PORTA=0x00;
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 002A 
; 0000 002B DDRC=0x00;
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 002C PORTC=0x00;
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 002D 
; 0000 002E TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (1<<CS01) | (1<<CS00);
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 002F TCNT0=0x00;
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 0030 OCR0=0x00;
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 0031 
; 0000 0032 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (1<<TOIE0);
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 0033 
; 0000 0034   #asm("sei")
;PCODE: $00000047 VOL: 0
	sei
;PCODE: $00000048 VOL: 0
; 0000 0035 
; 0000 0036 while (1)
;PCODE: $00000049 VOL: 0
; 0000 0037       {
; 0000 0038           if(PINC.2==0) {
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 0039             direction =1;
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 003A 
; 0000 003B         }else{
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 003C             direction =-1;
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 003D         }
;PCODE: $00000053 VOL: 0
; 0000 003E 
; 0000 003F       }
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 0040 }
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
