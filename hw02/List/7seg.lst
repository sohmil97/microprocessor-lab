
AVRASM ver. 2.1.30  C:\Users\Jamshid\Desktop\7seg\List\7seg.asm Mon Dec 21 00:16:15 2020

                 
                 
                 ;CodeVisionAVR C Compiler V2.05.0 Professional
                 ;(C) Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Chip type                : ATmega16
                 ;Program type             : Application
                 ;Clock frequency          : 8.000000 MHz
                 ;Memory model             : Small
                 ;Optimize for             : Size
                 ;(s)printf features       : int, width
                 ;(s)scanf features        : int, width
                 ;External RAM size        : 0
                 ;Data Stack size          : 256 byte(s)
                 ;Heap size                : 0 byte(s)
                 ;Promote 'char' to 'int'  : Yes
                 ;'char' is unsigned       : Yes
                 ;8 bit enums              : No
                 ;global 'const' stored in FLASH: Yes
                 ;Enhanced core instructions    : On
                 ;Smart register allocation     : On
                 ;Automatic register allocation : On
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1119
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0033 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 00c7 	JMP  _timer1_ovf_isr
000012 940c 00c2 	JMP  _timer0_ovf_isr
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _0x3:
00002a 063f
00002b 4f5b
00002c 6d66
00002d 077d      	.DB  0x3F,0x6,0x5B,0x4F,0x66,0x6D,0x7D,0x7
00002e 6f7f      	.DB  0x7F,0x6F
                 
                 __GLOBAL_INI_TBL:
00002f 000a      	.DW  0x0A
000030 0168      	.DW  _bcd_encode
000031 0054      	.DW  _0x3*2
                 
                 _0xFFFFFFFF:
000032 0000      	.DW  0
                 
                 __RESET:
000033 94f8      	CLI
000034 27ee      	CLR  R30
000035 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000036 e0f1      	LDI  R31,1
000037 bffb      	OUT  GICR,R31
000038 bfeb      	OUT  GICR,R30
000039 bfe5      	OUT  MCUCR,R30
                 
                 ;DISABLE WATCHDOG
00003a e1f8      	LDI  R31,0x18
00003b bdf1      	OUT  WDTCR,R31
00003c bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
00003d e08d      	LDI  R24,(14-2)+1
00003e e0a2      	LDI  R26,2
00003f 27bb      	CLR  R27
                 __CLEAR_REG:
000040 93ed      	ST   X+,R30
000041 958a      	DEC  R24
000042 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000043 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000044 e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000045 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000046 93ed      	ST   X+,R30
000047 9701      	SBIW R24,1
000048 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000049 e5ee      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00004a e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00004b 9185      	LPM  R24,Z+
00004c 9195      	LPM  R25,Z+
00004d 9700      	SBIW R24,0
00004e f061      	BREQ __GLOBAL_INI_END
00004f 91a5      	LPM  R26,Z+
000050 91b5      	LPM  R27,Z+
000051 9005      	LPM  R0,Z+
000052 9015      	LPM  R1,Z+
000053 01bf      	MOVW R22,R30
000054 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000055 9005      	LPM  R0,Z+
000056 920d      	ST   X+,R0
000057 9701      	SBIW R24,1
000058 f7e1      	BRNE __GLOBAL_INI_LOOP
000059 01fb      	MOVW R30,R22
00005a cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00005b e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00005c bfed      	OUT  SPL,R30
00005d e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00005e bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00005f e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000060 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000061 940c 00db 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;#include <mega16.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;const int TIMER0_VALUE = 0;
                 ;const int TIMER1_VALUE = 0x7A11;
                 ;static int selectedSeg = 0;
                 ;static unsigned int timer = 0;
                 ;unsigned char count[4] = {0};
                 ;unsigned char bcd_encode[10] = {
                 ;    0b0111111,
                 ;    0b0000110,
                 ;    0b1011011,
                 ;    0b1001111,
                 ;    0b1100110,
                 ;    0b1101101,
                 ;    0b1111101,
                 ;    0b0000111,
                 ;    0b1111111,
                 ;    0b1101111
                 ;};
                 
                 	.DSEG
                 ;
                 ;void timer0_tick_procedure(){
                 ; 0000 0014 void timer0_tick_procedure(){
                 
                 	.CSEG
                 _timer0_tick_procedure:
                 ; 0000 0015     if (selectedSeg >= 4)
000063 91a0 0160 	LDS  R26,_selectedSeg_G000
000065 91b0 0161 	LDS  R27,_selectedSeg_G000+1
000067 9714      	SBIW R26,4
000068 f02c      	BRLT _0x4
                 ; 0000 0016         selectedSeg = 0;
000069 e0e0      	LDI  R30,LOW(0)
00006a 93e0 0160 	STS  _selectedSeg_G000,R30
00006c 93e0 0161 	STS  _selectedSeg_G000+1,R30
                 ; 0000 0017     PORTC = 0x0F & ~(1 << selectedSeg);
                 _0x4:
00006e 91e0 0160 	LDS  R30,_selectedSeg_G000
000070 e0a1      	LDI  R26,LOW(1)
000071 940e 010a 	CALL __LSLB12
000073 95e0      	COM  R30
000074 70ef      	ANDI R30,LOW(0xF)
000075 bbe5      	OUT  0x15,R30
                 ; 0000 0018     PORTD = bcd_encode[count[selectedSeg]];
000076 91e0 0160 	LDS  R30,_selectedSeg_G000
000078 91f0 0161 	LDS  R31,_selectedSeg_G000+1
00007a 59ec      	SUBI R30,LOW(-_count)
00007b 4ffe      	SBCI R31,HIGH(-_count)
00007c 81e0      	LD   R30,Z
00007d e0f0      	LDI  R31,0
00007e 59e8      	SUBI R30,LOW(-_bcd_encode)
00007f 4ffe      	SBCI R31,HIGH(-_bcd_encode)
000080 81e0      	LD   R30,Z
000081 bbe2      	OUT  0x12,R30
                 ; 0000 0019     selectedSeg++;
000082 e6a0      	LDI  R26,LOW(_selectedSeg_G000)
000083 e0b1      	LDI  R27,HIGH(_selectedSeg_G000)
000084 91ed      	LD   R30,X+
000085 91fd      	LD   R31,X+
000086 9631      	ADIW R30,1
000087 93fe      	ST   -X,R31
000088 93ee      	ST   -X,R30
                 ; 0000 001A }
000089 9508      	RET
                 ;
                 ;void timer1_tick_procedure(){
                 ; 0000 001C void timer1_tick_procedure(){
                 _timer1_tick_procedure:
                 ; 0000 001D     int i,digit=timer;
                 ; 0000 001E     timer++;
00008a 940e 0146 	CALL __SAVELOCR4
                 ;	i -> R16,R17
                 ;	digit -> R18,R19
                +
00008c 9120 0162+LDS R18 , 0 + ( _timer_G000 )
00008e 9130 0163+LDS R19 , 0 + ( _timer_G000 ) + 1
                 	__GETWRMN 18,19,0,_timer_G000
000090 e6a2      	LDI  R26,LOW(_timer_G000)
000091 e0b1      	LDI  R27,HIGH(_timer_G000)
000092 91ed      	LD   R30,X+
000093 91fd      	LD   R31,X+
000094 9631      	ADIW R30,1
000095 93fe      	ST   -X,R31
000096 93ee      	ST   -X,R30
                 ; 0000 001F     if (timer>9999)
000097 91a0 0162 	LDS  R26,_timer_G000
000099 91b0 0163 	LDS  R27,_timer_G000+1
00009b 31a0      	CPI  R26,LOW(0x2710)
00009c e2e7      	LDI  R30,HIGH(0x2710)
00009d 07be      	CPC  R27,R30
00009e f028      	BRLO _0x5
                 ; 0000 0020         timer =0;
00009f e0e0      	LDI  R30,LOW(0)
0000a0 93e0 0162 	STS  _timer_G000,R30
0000a2 93e0 0163 	STS  _timer_G000+1,R30
                 ; 0000 0021     for (i=0;i<4;i++){
                 _0x5:
                +
0000a4 e000     +LDI R16 , LOW ( 0 )
0000a5 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x7:
                +
0000a6 3004     +CPI R16 , LOW ( 4 )
0000a7 e0e0     +LDI R30 , HIGH ( 4 )
0000a8 071e     +CPC R17 , R30
                 	__CPWRN 16,17,4
0000a9 f4a4      	BRGE _0x8
                 ; 0000 0022         count[i] = digit%10;
0000aa 01f8      	MOVW R30,R16
0000ab 59ec      	SUBI R30,LOW(-_count)
0000ac 4ffe      	SBCI R31,HIGH(-_count)
0000ad 01bf      	MOVW R22,R30
0000ae 01d9      	MOVW R26,R18
0000af e0ea      	LDI  R30,LOW(10)
0000b0 e0f0      	LDI  R31,HIGH(10)
0000b1 940e 012a 	CALL __MODW21
0000b3 01db      	MOVW R26,R22
0000b4 93ec      	ST   X,R30
                 ; 0000 0023         digit /= 10;
0000b5 01d9      	MOVW R26,R18
0000b6 e0ea      	LDI  R30,LOW(10)
0000b7 e0f0      	LDI  R31,HIGH(10)
0000b8 940e 0125 	CALL __DIVW21
0000ba 019f      	MOVW R18,R30
                 ; 0000 0024     }
                +
0000bb 5f0f     +SUBI R16 , LOW ( - 1 )
0000bc 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
0000bd cfe8      	RJMP _0x7
                 _0x8:
                 ; 0000 0025 }
0000be 940e 014b 	CALL __LOADLOCR4
0000c0 9624      	ADIW R28,4
0000c1 9508      	RET
                 ;
                 ;interrupt [TIM0_OVF] void timer0_ovf_isr(void){
                 ; 0000 0027 interrupt [10] void timer0_ovf_isr(void){
                 _timer0_ovf_isr:
0000c2 d035      	RCALL SUBOPT_0x0
                 ; 0000 0028     TCNT0= 0xFF - TIMER0_VALUE;
0000c3 efef      	LDI  R30,LOW(255)
0000c4 bfe2      	OUT  0x32,R30
                 ; 0000 0029     timer0_tick_procedure();
0000c5 df9d      	RCALL _timer0_tick_procedure
                 ; 0000 002A }
0000c6 c006      	RJMP _0xD
                 ;
                 ;interrupt [TIM1_OVF] void timer1_ovf_isr(void){
                 ; 0000 002C interrupt [9] void timer1_ovf_isr(void){
                 _timer1_ovf_isr:
0000c7 d030      	RCALL SUBOPT_0x0
                 ; 0000 002D     TCNT1 = 0xFFFF - TIMER1_VALUE;
0000c8 eeee      	LDI  R30,LOW(34286)
0000c9 e8f5      	LDI  R31,HIGH(34286)
0000ca bdfd      	OUT  0x2C+1,R31
0000cb bdec      	OUT  0x2C,R30
                 ; 0000 002E     timer1_tick_procedure();
0000cc dfbd      	RCALL _timer1_tick_procedure
                 ; 0000 002F }
                 _0xD:
0000cd 91e9      	LD   R30,Y+
0000ce bfef      	OUT  SREG,R30
0000cf 91f9      	LD   R31,Y+
0000d0 91e9      	LD   R30,Y+
0000d1 91b9      	LD   R27,Y+
0000d2 91a9      	LD   R26,Y+
0000d3 9199      	LD   R25,Y+
0000d4 9189      	LD   R24,Y+
0000d5 9179      	LD   R23,Y+
0000d6 9169      	LD   R22,Y+
0000d7 90f9      	LD   R15,Y+
0000d8 9019      	LD   R1,Y+
0000d9 9009      	LD   R0,Y+
0000da 9518      	RETI
                 ;
                 ;void main(void){
                 ; 0000 0031 void main(void){
                 _main:
                 ; 0000 0032     DDRC= 0x0F;
0000db e0ef      	LDI  R30,LOW(15)
0000dc bbe4      	OUT  0x14,R30
                 ; 0000 0033     DDRD= 0xFF;
0000dd efef      	LDI  R30,LOW(255)
0000de bbe1      	OUT  0x11,R30
                 ; 0000 0034     PORTC=0xFE;
0000df efee      	LDI  R30,LOW(254)
0000e0 bbe5      	OUT  0x15,R30
                 ; 0000 0035 
                 ; 0000 0036     TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (1<<CS02) | (0<<CS01) | (1<<CS00);
0000e1 e0e5      	LDI  R30,LOW(5)
0000e2 bfe3      	OUT  0x33,R30
                 ; 0000 0037     TCNT0=0xFF - TIMER0_VALUE;
0000e3 efef      	LDI  R30,LOW(255)
0000e4 bfe2      	OUT  0x32,R30
                 ; 0000 0038     TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
0000e5 e0e0      	LDI  R30,LOW(0)
0000e6 bdef      	OUT  0x2F,R30
                 ; 0000 0039     TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (1<<CS12) | (0<<CS11) | (0<<CS10);
0000e7 e0e4      	LDI  R30,LOW(4)
0000e8 bdee      	OUT  0x2E,R30
                 ; 0000 003A     TCNT1 = 0xFFFF - TIMER1_VALUE;
0000e9 eeee      	LDI  R30,LOW(34286)
0000ea e8f5      	LDI  R31,HIGH(34286)
0000eb bdfd      	OUT  0x2C+1,R31
0000ec bdec      	OUT  0x2C,R30
                 ; 0000 003B     TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (1<<TOIE1) | (0<<OCIE0) | (1<<TOIE0);
0000ed e0e5      	LDI  R30,LOW(5)
0000ee bfe9      	OUT  0x39,R30
                 ; 0000 003C     #asm("sei")
0000ef 9478      	sei
                 ; 0000 003D     timer = 1;
0000f0 e0e1      	LDI  R30,LOW(1)
0000f1 e0f0      	LDI  R31,HIGH(1)
0000f2 93e0 0162 	STS  _timer_G000,R30
0000f4 93f0 0163 	STS  _timer_G000+1,R31
                 ; 0000 003E     while (1);
                 _0x9:
0000f6 cfff      	RJMP _0x9
                 ; 0000 003F }
                 _0xC:
0000f7 cfff      	RJMP _0xC
                 
                 	.DSEG
                 _selectedSeg_G000:
000160           	.BYTE 0x2
                 _timer_G000:
000162           	.BYTE 0x2
                 _count:
000164           	.BYTE 0x4
                 _bcd_encode:
000168           	.BYTE 0xA
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x0:
0000f8 920a      	ST   -Y,R0
0000f9 921a      	ST   -Y,R1
0000fa 92fa      	ST   -Y,R15
0000fb 936a      	ST   -Y,R22
0000fc 937a      	ST   -Y,R23
0000fd 938a      	ST   -Y,R24
0000fe 939a      	ST   -Y,R25
0000ff 93aa      	ST   -Y,R26
000100 93ba      	ST   -Y,R27
000101 93ea      	ST   -Y,R30
000102 93fa      	ST   -Y,R31
000103 b7ef      	IN   R30,SREG
000104 93ea      	ST   -Y,R30
000105 9508      	RET
                 
                 
                 	.CSEG
                 __ANEGW1:
000106 95f1      	NEG  R31
000107 95e1      	NEG  R30
000108 40f0      	SBCI R31,0
000109 9508      	RET
                 
                 __LSLB12:
00010a 23ee      	TST  R30
00010b 2e0e      	MOV  R0,R30
00010c 2fea      	MOV  R30,R26
00010d f019      	BREQ __LSLB12R
                 __LSLB12L:
00010e 0fee      	LSL  R30
00010f 940a      	DEC  R0
000110 f7e9      	BRNE __LSLB12L
                 __LSLB12R:
000111 9508      	RET
                 
                 __DIVW21U:
000112 2400      	CLR  R0
000113 2411      	CLR  R1
000114 e190      	LDI  R25,16
                 __DIVW21U1:
000115 0faa      	LSL  R26
000116 1fbb      	ROL  R27
000117 1c00      	ROL  R0
000118 1c11      	ROL  R1
000119 1a0e      	SUB  R0,R30
00011a 0a1f      	SBC  R1,R31
00011b f418      	BRCC __DIVW21U2
00011c 0e0e      	ADD  R0,R30
00011d 1e1f      	ADC  R1,R31
00011e c001      	RJMP __DIVW21U3
                 __DIVW21U2:
00011f 60a1      	SBR  R26,1
                 __DIVW21U3:
000120 959a      	DEC  R25
000121 f799      	BRNE __DIVW21U1
000122 01fd      	MOVW R30,R26
000123 01d0      	MOVW R26,R0
000124 9508      	RET
                 
                 __DIVW21:
000125 d012      	RCALL __CHKSIGNW
000126 dfeb      	RCALL __DIVW21U
000127 f40e      	BRTC __DIVW211
000128 dfdd      	RCALL __ANEGW1
                 __DIVW211:
000129 9508      	RET
                 
                 __MODW21:
00012a 94e8      	CLT
00012b ffb7      	SBRS R27,7
00012c c004      	RJMP __MODW211
00012d 95a0      	COM  R26
00012e 95b0      	COM  R27
00012f 9611      	ADIW R26,1
000130 9468      	SET
                 __MODW211:
000131 fdf7      	SBRC R31,7
000132 dfd3      	RCALL __ANEGW1
000133 dfde      	RCALL __DIVW21U
000134 01fd      	MOVW R30,R26
000135 f40e      	BRTC __MODW212
000136 dfcf      	RCALL __ANEGW1
                 __MODW212:
000137 9508      	RET
                 
                 __CHKSIGNW:
000138 94e8      	CLT
000139 fff7      	SBRS R31,7
00013a c002      	RJMP __CHKSW1
00013b dfca      	RCALL __ANEGW1
00013c 9468      	SET
                 __CHKSW1:
00013d ffb7      	SBRS R27,7
00013e c006      	RJMP __CHKSW2
00013f 95a0      	COM  R26
000140 95b0      	COM  R27
000141 9611      	ADIW R26,1
000142 f800      	BLD  R0,0
000143 9403      	INC  R0
000144 fa00      	BST  R0,0
                 __CHKSW2:
000145 9508      	RET
                 
                 __SAVELOCR4:
000146 933a      	ST   -Y,R19
                 __SAVELOCR3:
000147 932a      	ST   -Y,R18
                 __SAVELOCR2:
000148 931a      	ST   -Y,R17
000149 930a      	ST   -Y,R16
00014a 9508      	RET
                 
                 __LOADLOCR4:
00014b 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
00014c 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
00014d 8119      	LDD  R17,Y+1
00014e 8108      	LD   R16,Y
00014f 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :  16 r1 :   7 r2 :   0 r3 :   0 r4 :   0 r5 :   0 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   2 
r16:   6 r17:   5 r18:   6 r19:   3 r20:   0 r21:   0 r22:   6 r23:   2 
r24:   9 r25:   6 r26:  25 r27:  14 r28:   2 r29:   1 r30:  87 r31:  30 
x  :  12 y  :  32 z  :   9 
Registers used: 20 out of 35 (57.1%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   1 add   :   1 
adiw  :   5 and   :   0 andi  :   1 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :   2 
brge  :   1 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   1 
brlt  :   1 brmi  :   0 brne  :   5 brpl  :   0 brsh  :   0 brtc  :   2 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   1 call  :   5 
cbi   :   0 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   4 cls   :   0 clt   :   2 clv   :   0 clz   :   0 com   :   5 
cp    :   0 cpc   :   2 cpi   :   2 cpse  :   0 dec   :   3 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   1 inc   :   1 jmp   :  22 ld    :  19 ldd   :   3 ldi   :  45 
lds   :   9 lpm   :   7 lsl   :   2 lsr   :   0 mov   :   2 movw  :  12 
mul   :   0 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   0 
ori   :   0 out   :  24 pop   :   0 push  :   0 rcall :  11 ret   :  11 
reti  :   1 rjmp  :   9 rol   :   3 ror   :   0 sbc   :   1 sbci  :   5 
sbi   :   0 sbic  :   0 sbis  :   0 sbiw  :   4 sbr   :   1 sbrc  :   1 
sbrs  :   3 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   0 
ses   :   0 set   :   2 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  24 std   :   0 sts   :   6 sub   :   1 subi  :   4 swap  :   0 
tst   :   1 wdr   :   0 
Instructions used: 52 out of 116 (44.8%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0002a0    654     18    672   16384   4.1%
[.dseg] 0x000060 0x000172      0     18     18    1119   1.6%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 0 warnings
